
"""
listsearch
~~~~~~~~~~

List based search tools.
"""

import re

import monostyle.util.monostyle_io as monostyle_io
from monostyle.util.report import Report
import monostyle.rst_parser.walker as rst_walker
from monostyle.util.segmenter import Segmenter
from monostyle.util.porter_stemmer import Porterstemmer


def compile_searchlist(searchlist, re_conf):
    """Make search list one dimensional.

    searchlist -- a list with one or two columns. The first column contains the terms,
                  the second the message string(s) outputted to the user.
                  If only one column is given the message is
                  either the "message" conf variable or is generated by joining the terms.

                  Inline:
                  If the first terms starts with a '#' the entry is skipped.
                  If a terms starts with a '?' the term is skipped.
                  These can be escaped with a backslash.
                  If a terms ends with a '|' the term will not be stemed.
    re_conf -- regex flags.
        stem -- stem the terms.
        overline -- match over whitespace including line wraps.
        boundary -- pattern start and end with word boundaries.
    """
    porter_stemmer = Porterstemmer()
    comlist = []
    flags = 0
    if re_conf["ignorecase"]:
        flags = re.IGNORECASE
    if re_conf["mulitline"] or re_conf["overline"]:
        flags = flags | re.MULTILINE
    if re_conf["dotall"]:
        flags = flags | re.DOTALL

    for entry in searchlist:
        if isinstance(entry, str):
            terms = entry
            if "message" in re_conf:
                message = re_conf["message"]
            else:
                message = entry
        elif len(entry) == 1:
            terms = entry[0]
            if "message" in re_conf:
                message = re_conf["message"]
            else:
                message = entry[0]
        elif len(entry) == 2:
            terms = entry[0]
            message = entry[1]
        else:
            print("list: wrong form:", entry)
            continue

        if isinstance(terms, str):
            terms = [terms]

        for pattern_str in terms:
            if pattern_str == "":
                continue
            # comment
            if pattern_str.startswith('#'):
                # skip entire entry
                break
            # ignore this single term
            if pattern_str.startswith('?'):
                continue

            # remove escape
            if pattern_str.startswith('\\#') or pattern_str.startswith('\\?'):
                pattern_str = pattern_str[1:]

            if re_conf["stem"]:
                if not pattern_str.endswith('|'):
                    pattern_str = porter_stemmer.stem(pattern_str, 0, len(pattern_str)-1)
                else:
                    pattern_str = pattern_str[:-1]
            else:
                if re_conf["overline"]:
                    pattern_str = re.sub(r" +", "\\\\s+?", pattern_str)
                if re_conf["boundary"]:
                    pattern_str = r'\b' + pattern_str + r'\b'

            if not re_conf["word"]:
                pattern = re.compile(pattern_str, flags)
            else:
                pattern = pattern_str

            if not isinstance(message, str):
                message = '/'.join(message)

            comlist.append((pattern, message))

    return comlist


def parse_config(re_conf_str):
    """Parse config to Booleans."""
    re_conf_str = re_conf_str.upper()
    re_conf = {
        "boundary": "B",
        "dotall": "D",
        "ignorecase": "I",
        "mulitline": "M",
        "overline": "O",
        "stem": "S",
        "word": "W"
    }
    for key in re_conf.keys():
        re_conf[key] = bool(re_conf[key] in re_conf_str)

    return re_conf


def search_free(toolname, document, reports, comlist):
    """Search terms in document."""
    toolname = "list-search"

    instr_pos = {
        "sect": {"*": ["name"]},
        "field": {"*": ["name", "body"]},
        "*": {"*": ["head", "body"]}
    }
    instr_neg = {
        "dir": {
            "figure": ["head"],
            "code-block": "*", "default": "*", "include": "*", "index": "*",
            "math": "*", "toctree": "*", "youtube": "*", "vimeo": "*"
        },
        "substdef": {"image": ["head"], "unicode": "*", "replace": "*"},
        "comment": "*", "doctest": "*", "target": "*",
        "role": {
            "kbd": "*", "class": "*", "mod": "*", "math": "*"
        },
        "standalone": "*"
    }

    for part in rst_walker.iter_nodeparts_instr(document.body, instr_pos, instr_neg):
        part_str = str(part.code)
        for pattern, message in comlist:
            for m in re.finditer(pattern, part_str):
                output = part.code.slice_match_obj(m, 0, True)
                line = Report.getline_punc(document.body.code, output, 50, 30)
                reports.append(Report('I', toolname, output, message, line))

    return reports


def search_word(toolname, document, reports, comlist, config):
    """Search terms in document within word boundaries."""
    toolname = "search-word"
    segmenter = Segmenter()
    porter_stemmer = Porterstemmer()

    instr_pos = {
        "sect": {"*": ["name"]},
        "field": {"*": ["name", "body"]},
        "*": {"*": ["head", "body"]}
    }
    instr_neg = {
        "dir": {
            "figure": ["head"],
            "code-block": "*", "default": "*", "include": "*", "index": "*",
            "math": "*", "toctree": "*", "youtube": "*", "vimeo": "*"
        },
        "substdef": {"image": ["head"], "unicode": "*", "replace": "*"},
        "comment": "*", "doctest": "*", "target": "*",
        "role": {
            "kbd": "*", "class": "*", "mod": "*", "math": "*"
        },
        "standalone": "*"
    }

    for part in rst_walker.iter_nodeparts_instr(document.body, instr_pos, instr_neg):
        for word in segmenter.iter_word(part.code):
            word_str = str(word)
            if config["ignorecase"]:
                word_str = word_str.lower()
            if config["stem"]:
                word_stem = porter_stemmer.stem(word_str, 0, len(word_str)-1)

            for pattern, message in comlist:
                if config["stem"]:
                    if not pattern.endswith('|'):
                        if pattern != word_stem:
                            continue
                    else:
                        if pattern[:-1] != word_str:
                            continue

                if pattern != word_str:
                    continue

                line = Report.getline_punc(document.body.code, word, 50, 30)
                reports.append(Report('I', toolname, word, message, line))

    return reports


def search_pre(op):
    def wildcard_leaf(data_src):
        for key, value in data_src.items():
            if isinstance(value, dict):
                yield from wildcard_leaf(value)
            elif isinstance(value, list):
                yield key, value

    config = parse_config(op[4])
    if not op[0].endswith("/*"):
        data_src = monostyle_io.get_data_file(op[0])
        # last path segment as default message.
        config["message"] = op[0].split('/')[-1]
        data_comp = compile_searchlist(data_src, config)
    else:
        data_src = monostyle_io.get_data_file(op[0][:-2])
        data_comp = []
        for key, value in wildcard_leaf(data_src):
            # key as default message.
            config["message"] = key
            data_comp.extend(compile_searchlist(value, config))

    args = dict()
    args["data"] = data_comp
    args["config"] = config

    return args


def search(toolname, document, reports, data, config):
    """Switch between free and with boundary."""
    if not config["word"]:
        reports = search_free(toolname, document, reports, data)
    else:
        reports = search_word(toolname, document, reports, data, config)

    return reports


OPS = (
    ("avoid/*", search, search_pre, True, "BI"),
    ("blender/Editors", search, search_pre, True, ""),
    ("blender/Modes", search, search_pre, True, ""),
    ("blender/UI", search, search_pre, True, "I"),
    ("dev/*", search, search_pre, True, "BI"),
    ("simplify", search, search_pre, True, "BI")
)

if __name__ == "__main__":
    from monostyle.__main__ import main_mod
    main_mod(__doc__, OPS, __file__)
